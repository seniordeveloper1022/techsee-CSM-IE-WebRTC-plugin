// WebRTCPlugin.idl : IDL source for WebRTCPlugin
//

// This file will be processed by the MIDL tool to
// produce the type library (WebRTCPlugin.tlb) and marshalling code.

#include "olectl.h"
import "oaidl.idl";
import "ocidl.idl";

[
	object,
	uuid(4FE9050D-54FF-4C8A-B781-DF77FD95F24B),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IWebRTCProxy : IDispatch {
	[id(1), local] HRESULT createPeerConnection([in] VARIANT configuration, [out, retval] IUnknown** pc);
	[id(2), local] HRESULT createLocalAudioTrack([in] VARIANT constraints, [out, retval] IUnknown** track);
	[id(3), local] HRESULT createLocalVideoTrack([in] VARIANT constraints, [out, retval] IUnknown** track);
	[id(4), local] HRESULT parseIceCandidate([in] VARIANT candidate, [out, retval] VARIANT* parsed);
};

[
	object,
	uuid(EA4F5879-986E-4D86-AFFA-710CADB29A45),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTCPeerConnection : IDispatch {
	[id(1), local] HRESULT createOffer([in] VARIANT successCallback, [in] VARIANT failureCallback, [in] VARIANT options);
	[id(2), local] HRESULT setLocalDescription([in] VARIANT successCallback, [in] VARIANT failureCallback, [in] VARIANT description);
	[id(3), local] HRESULT createAnswer([in] VARIANT successCallback, [in] VARIANT failureCallback, [in] VARIANT options);
	[id(4), local] HRESULT setRemoteDescription([in] VARIANT successCallback, [in] VARIANT failureCallback, [in] VARIANT description);
	[id(5), local] HRESULT addIceCandidate([in] VARIANT successCallback, [in] VARIANT failureCallback, [in] VARIANT candidate);
	[id(6), local] HRESULT addTrack([in] VARIANT track, VARIANT stream, [out, retval] IUnknown** sender);
	[id(7), local] HRESULT removeTrack([in] VARIANT sender);
	[id(8), local] HRESULT getRemoteStreamTracks([in] VARIANT stream, VARIANT successCallback);
	[id(9), local] HRESULT createDataChannel([in] VARIANT label, [in] VARIANT dataChannelDict, [out, retval] IUnknown** dataChannel);
	[id(10), local] HRESULT setConfiguration([in] VARIANT configuration);
	[id(11), local] HRESULT close();

	[propget, id(12), local] HRESULT localDescription([out, retval] VARIANT* val);
	[propget, id(13), local] HRESULT currentLocalDescription([out, retval] VARIANT* val);
	[propget, id(14), local] HRESULT pendingLocalDescription([out, retval] VARIANT* val);
	[propget, id(15), local] HRESULT remoteDescription([out, retval] VARIANT* val);
	[propget, id(16), local] HRESULT currentRemoteDescription([out, retval] VARIANT* val);
	[propget, id(17), local] HRESULT pendingRemoteDescription([out, retval] VARIANT* val);

	[propput, id(18)] HRESULT onnegotiationneeded([in] VARIANT handler);
	[propput, id(19)] HRESULT onicecandidate([in] VARIANT handler);
	[propput, id(20)] HRESULT onicecandidateerror([in] VARIANT handler);
	[propput, id(21)] HRESULT onsignalingstatechange([in] VARIANT handler);
	[propput, id(22)] HRESULT oniceconnectionstatechange([in] VARIANT handler);
	[propput, id(23)] HRESULT onicegatheringstatechange([in] VARIANT handler);
	[propput, id(24)] HRESULT onconnectionstatechange([in] VARIANT handler);
	[propput, id(25)] HRESULT onaddstream([in] VARIANT handler);
	[propput, id(26)] HRESULT onremovestream([in] VARIANT handler);
	[propput, id(27)] HRESULT ondatachannel([in] VARIANT handler);

};

[
	object,
	uuid(7C0AB5CB-FDF9-4C2E-93BD-E9AF0074539C),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IMediaStreamTrack : IDispatch {
	[propget, id(1)] HRESULT id([out, retval] VARIANT* val);
	[propget, id(2)] HRESULT kind([out, retval] VARIANT* val);
	[propget, id(3)] HRESULT label([out, retval] VARIANT* val);
	[propget, id(4)] HRESULT state([out, retval] VARIANT* val);
	[propget, id(5)] HRESULT enabled([out, retval] VARIANT* val);
	[propput, id(5)] HRESULT enabled([in] VARIANT val);
};

[
	object,
	uuid(291C777C-0E58-4B9C-96CE-AADCD0945826),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IRTPSender : IDispatch {
	[propget, id(1)] HRESULT id([out, retval] VARIANT* val);
};

[
	object,
	uuid(65C1AD7A-7A7F-4139-BCC4-768DF33BF2D1),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IVideoRenderer : IDispatch {
	[id(1), local]    HRESULT setTrack([in] VARIANT track);
	[propget, id(2)]  HRESULT videoWidth([out, retval] SHORT* pVal);
	[propget, id(3)]  HRESULT videoHeight([out, retval] SHORT* pVal);
	[propput, id(4)]  HRESULT onresize([in] VARIANT handler);
	[id(5), local]    HRESULT getFrame([out, retval] VARIANT* val);
};

[
	object,
	uuid(a5082e08-d3f5-41e8-80a5-e7fd2a8334e7),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IDataChannel : IDispatch
{
	[id(1), local] HRESULT send([in] VARIANT data);
	[id(2), local] HRESULT close();
	[propget, id(3)] HRESULT label([out, retval] VARIANT* val);
	[propget, id(4)] HRESULT ordered([out, retval] VARIANT* val);
	[propget, id(5)] HRESULT maxPacketLifeTime([out, retval] VARIANT* val);
	[propget, id(6)] HRESULT negotiated([out, retval] VARIANT* val);
	[propget, id(7)] HRESULT id([out, retval] VARIANT* val);
	[propget, id(8)] HRESULT priority([out, retval] VARIANT* val);
	[propget, id(9)] HRESULT readyState([out, retval] VARIANT* val);
	[propget, id(10)] HRESULT bufferedAmount([out, retval] VARIANT* val);
	[propget, id(11)] HRESULT bufferedAmountLowThreshold([out, retval] VARIANT* val);
	[propput, id(11)] HRESULT bufferedAmountLowThreshold([in] VARIANT val);

	[propput, id(12)] HRESULT onopen([in] VARIANT handler);
	[propput, id(13)] HRESULT onbufferedamountlow([in] VARIANT handler);
	[propput, id(14)] HRESULT onerror([in] VARIANT handler);
	[propput, id(15)] HRESULT onclose([in] VARIANT handler);
	[propput, id(16)] HRESULT onmessage([in] VARIANT handler);
};

[
	uuid(D4447E9C-3398-4C2A-ADB9-54C57441F477),
	version(1.0),
]
library WebRTCPluginLib
{
	importlib("stdole2.tlb");
	[
		uuid(78190E67-29CE-46BC-BCCA-96E108E5D56E),
		control
	]
	coclass WebRTCProxy
	{
		[default] interface IWebRTCProxy;
	};
	[
		uuid(93AA26E7-51F0-4BEC-8FEE-E59C605D503B),
		control
	]
	coclass RTCPeerConnection
	{
		[default] interface IRTCPeerConnection;
	};
	[
		uuid(93C5AC2B-5F36-4FAA-B830-CE64AFE921E5),
		control
	]
	coclass MediaStreamTrack
	{
		[default] interface IMediaStreamTrack;
	};
	[
		uuid(C98B209A-7914-466A-BD02-0A4A13E15D83),
		control
	]
	coclass RTPSender
	{
		[default] interface IRTPSender;
	};
	[
		uuid(B8E874D9-72BA-4E54-B59B-3513081DF516),
		control
	]
	coclass VideoRenderer
	{
		[default] interface IVideoRenderer;
	};
	[
		uuid(093a1398-bd66-4547-aa73-79d6a0c7e578),
		control
	]
	coclass DataChannel
	{
		[default] interface IDataChannel;
	};
};

